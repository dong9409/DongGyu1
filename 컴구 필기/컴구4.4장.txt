68, 69p
Replaement Algorithm은 Direct냐 Associative, set Associative냐에 따라 다르다.
Direct에서는 그냥 replace 할 수 밖에 없다.
Associative는 그냥 비워져 있는곳에 가면되는데 없으면 그냥 하나를 없애야한다.
그 방식으로는
1. LRU 최근에 적게 사용된 것을 없애는것이다. 예전에는 많이 썻는데 이제 잘 안쓴다 이러면 쫓겨난다.
2. FIFO는 예전거를 그냥 무조건 없애는거
3. least frequently used는 가장 빈도수가 적게 사용된 것을 없애는 것이다. 예전에 많이쓰고 지금 잘 안쓰면 안쫓겨난다.
4. 랜덤하게 쫓아내는 방법

70p
만약에 코어가 4개라면 코어 각각 캐시를 가진다. 123 이라는 데이터를 동시에 코어 4개가 다쓴다고 했을때
첫번째 코어에서 123을 124로 바꾸면 한다면 write thorough 에서는 메모리의 값 자체가 124로 바뀌어서 다른 프로세서도 124를 쓴다.
일관성이 유지된다. Write back 방식을 쓰면 일관성 유지가 복잡해 진다.

71p
Write policy
1. Write through
프로세서가 메모리에 엑세스하면 그 데이터는 miss가 생길경우 캐시에 저장된다.
프로세서가 그 데이터를 업데이트하면 캐시의 값도 바뀐다. 이와 동시에 메모리 값도 바꿔주는걸 write through라고 한다.
일관성 유지에는 좋지만 병목현상이 생길 수 있다.

2. Write back
캐시에 있는데이터만 쭉 업데이트 하다보면 캐시에 있는 값이랑 메모리에 있는 값이랑 달라지게 되는데
캐시의 그 값이 쫓겨날때 메모리의 값을 바꿔주는 것이다.
복잡한 logic이 필요하다.

72p
캐시 라인 사이즈와 성능과의 관계

73p
캐시가 두개가 존재한다
상식적으로 L1캐시의 용량이 크면 hit ratio가 처음에 커진다.
L2가 L1보다 클경우에만 효과가 높아진다.
쭉 높이다보면 L2캐시를 아무리 늘려도 성능이 좋아지지 않는 구간이 생긴다.

76p
Unified vs Split
Unified = data와 instruction이 하나의 캐시를 씀
Split = data와 instruction이 캐시를 따로씀
요즘은 Split방식을 쓴다. 어떤 시점에 여러개의 연산이 동시에 시행(supersclar)되는 경우가 많기 때문이다.

78p
ALU가 3개있다. 따라서 superscalar방식이다. 
Data 캐시와 instruction 캐시가 분리되어 있는 모습이다.
