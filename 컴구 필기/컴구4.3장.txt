46p
Direct Mapping 방식 추가로 읽어보기


48p
Direct Mapping 방식의 단점을 해결하기 위한 극단적인 방식, Associative Mapping
왼쪽은 메인메모리의 어떤 한블럭인데 캐시의 어떤곳이든 들어갈 수 있다. 이게 Associative Mapping방식이다.
Direct Mapping은 캐시메모리 스펙이 뜨면 들어갈수 있는 곳이 딱 정해지는데, Associative는 전부 다 들어갈 수 있다.
따라서 line을 나타내는게 없고 Tag와 word(블록의 몇번째 데이터인지)로 주소를 나눈다.
그냥 메인메모리의 주소 w빼고 를 태그에 넣어라 이런뜻이다. 태그가 곧 주소이므로 동시에 모든 태그를 비교해야한다.
이 자체가 매우 큰 비용을 발생시킨다.
장점은 캐시의 활용도를 높일 수 있는것. flexible
단점은 태그를 확인할 때 모두 비교해야하니까 overhead(간접비용)가 크다. cost

50p
50p와 43p의 compare하는 쪽을보면 차이가 난다. 라인을 먼저 찾고 비교하기때문에 Direct는 태그를 비교하는것을 한번만 하면 되는데
Associative는 라인이 없기 때문에 캐시의 모든 태그를 다 비교해야 한다.

52p
하위 w비트는 블락안에 몇개의 칸이 있는지 구분하기 위해서 쓰고
나머지는 모두 태그로 쓴다.

54p
이 두가지의 특성을 모두 가진게 Set Associative 매핑이라고 한다.
2 line per set이라고 하면 2 way라고 한다.

55p
v sets of k lines
i = j mod v 에서 j가 주소고 v가 set의 개수이면 i는 몇번째 셋에 들어갈 것이냐를 나타낸다.

56p
라인은 16개이고 set이 8개이면
2line = 2way set associative mapping이 된다.
메인메모리 전체가 32개의 칸을 가진다고 하자 그러면 그림처럼 각각의 set으로 간다.
현재 set 0에는 8, 24가 들어가있고 set1에는 1, 9가 들어가있고 set7에는 15, 23이 들어가있다.

58p
왼쪽이 메모리고 오른쪽이 캐시이다.
메인메모리의 주소가 결정되면 자기가 갈수있는 set이 정해지고, 그 set안에 k개의 라인,(자유도)가 있다.
거기서 비어져있는곳으로 간다.

59p
set을 보고 몇번째 set인지 찾는다. 총 k개의 line이므로 k개의 자유도가 있다고 한다.
이 set의 모든 태그를 비교해서 찾는다. 극단적으로 모든 tag를 비교하는것 보다는 훨씬 간단하다.


60p
set이 두개있고, line이 4개니까 4way set associative 
set을 정해서 그 set안에 나머지 비어있는 곳에 들어간다.

61p
Tag, set wordbit로 찾는다.


예시를보면 캐시가 이상하게 생겼는데 Set Number에 좌우로 두개의 라인이 있다. 따라서 2way이다.
자유도 way의 의미를 잘 알아야한다. 

63p
k-way v-set
k=1 이고 v가 m이다? 갈수있는 곳이 딱 정해져있다 => direct mapping
k=m 이고 v가 1이다? 자유도가 많다 => associate mapping

65p
direct = 1way
캐시사이즈가 작을때는 way를 늘리면 hit이 올라가지만 캐시사이즈가 크면 별 효과가 없다.

66p
셋과 자유도에 따른 그림.
