입출력 모듈이 왜 필요한가?
다양한 입출력 장치들이 있다. 
어떤것들은 아주 느리고 어떤것들은 아주 빠르다.
디바이스 마다 필요한 데이터의 형식도 다르다.
다양한 디바이스를 추상화 시킬 수 있는 것이 입출력 모듈이다.


입출력 디바이스는 메모리나 CPU보다 훨씬 느리다.
CPU에서 발생이 되는 고속, 대용량의 데이터를 느린 입출력 장치로 보내려면
버퍼역할을 하는 모듈이 필요한데 이게 입출력 모듈이다.


입출력 모듈은 cpu와 입출력 디바이스 메모리와 입출력 디바이스와의 인터페이스 역할을 한다.


실제 디바이스와 cpu, 메모리 사이의 데이터 포맷을 맞춰주고 속도를 동기화 시키는 것이 I/O 모듈이다.


External Device Block Diagram

위에 화살표가 가리키는게 I/O 모듈이고 거기서 Control Signal이 아래쪽의 I/O 디바이스로 간다.
데이터 같은 경우에는 I/O 모듈로부터 데이터를 받아서 버퍼를 통해서 실제 동작 할수있는 형태로 바꾸어진다.
자세히 말하면 전기신호가 Buffer에 기록되면 Transducer(변환기)에 의해 형태가 변환된다.
즉 변환기는 어떤 에너지 형태를 다른 에너지형태로 변환 시키는 역할을 한다.


I/O 모듈의 기능
1. Control and timing
2. Processor communication
3. Device communication
4. Data buffering => Cpu랑 외부 디바이스랑 속도차이가 나니까 중간에 임시로 저장해놓기 위해 존재
5. Error detection


일반적인 입출력 단계
1. Cpu는 I/O 모듈의 사용 가능 상태를 체크한다
2. 사용 가능하면 cpu는 데이터를 전송을 하라 라는 요청을한다
3. I/O 모듈은 디바이스로 부터 데이터를 받고
4. 그 데이터를 CPU로 보내준다.


I/O 모듈은 타이밍, 포맷의 디테일을 자기가 맡아서 해준다.
따라서 프로세서는 I/O 모듈과 통신을 하면 되지 직접 디바이스와 통신할 필요가 없다.


입출력과 관련해서 중요한 방식들
1. Programmed I/O = 입출력이 CPU상에서 동작이 되는 프로그램에 의해서 모든게 다 이루어진다는 뜻.
2. Interrupt-driven I/O = 인터럽트를 사용 한다.
3. Direct memory access(DMA)


(a)는 Programmed I/O 
1.cpu가 입출력 모듈에게 Read커맨드를 issue(보내다)한다.
2.입출력 모듈의 상태를 cpu가 읽는다.
3.입출력 모듈로 부터 데이터를 cpu가 읽는다.
4.cpu가 메모리에 데이터를 쓴다.
=> cpu가 처음부터 끝까지 프로그램을 이용하여 모두 컨트롤 한다.

(b)는 인터럽트
1.cpu가 입출력 모듈에게 Read커맨드를 issue(보내다)한다. 그리고 cpu는 다른 작업을 한다.
2.I/O 모듈이 인터럽트를 걸어서 입출력 모듈의 상태를 읽는다.
3.입출력 모듈로 부터 데이터를 cpu가 읽는다.
4.cpu가 메모리에 데이터를 쓴다.
=> cpu가 계속 대기하지 않아도 된다.

(c)Direct memory access, DMA
1. CPU가 커맨드를 블락단위로 DMA컨트롤러로 보내고 다른일을 한다.
2. CPU가 DMA모듈의 인터럽트를 보고 작업을 수행시킨다.
=> cpu 말고 다른것이 직접 메모리에 접근한다.
